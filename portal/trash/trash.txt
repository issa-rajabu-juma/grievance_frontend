   <ul className="list-group list-group-flush-x mb-9" id="faqCollapseParentOne">
        <li className="list-group-item">

          
          <a className="dropdown-toggle d-block fs-lg fw-bold text-reset" data-bs-toggle="collapse" href="#faqCollapseOne" aria-expanded="true">
            Default Grievances &nbsp; <span className="badge bg-dark">2</span>
          </a>

          
          <div className="collapse show" id="faqCollapseOne" data-bs-parent="#faqCollapseParentOne">
            <div className="mt-5">
              <FollowupTable data={grievances} />
            </div>
          </div>

        </li>
        <li className="list-group-item">

          
          <a className="dropdown-toggle d-block fs-lg fw-bold text-reset" data-bs-toggle="collapse" href="#faqCollapseTwo">
            <span className="badge bg-dark">2</span> &nbsp; Anonymous Grievances    
          </a>

          
          <div className="collapse" id="faqCollapseTwo" data-bs-parent="#faqCollapseParentOne">
            <div className="mt-5">
              <FollowupTable data={grievances} />

            </div>
          </div>

        </li>
       
      </ul>

       // useEffect(() => {
  //   if (status === 'idle') {
  //     dispatch(fetchGrievances())
  //   }
  // }, [status, dispatch])
  
  {
                        "grievance_id": '1',
                        "date": "12/03/2023",
                        "title": "Maoni yangu yametupiliwa mbali",
                        "description": "tokea mwaka juzi sijapaata feedback please comply",
                        "nature": "complaint",
                        "severity": "5",
                        "client": "1",
                        "who": "2023-09-28 00:57:52.322984",
                        "what": "12/03/2023",
                        "where": "1",
                        "result": "1",
                        "comment": "1",
                        "channel": "portal",
                        "language": "swaheng",
                        "attachment": "a.png",
                        "griever": "1",
                        "grievance_status": "1",
                        'created_date': '',
                        'updated_date': '',
                        'created_by': '',
                        'updated_by': ''

                        
                    },

                    {
                        "grievance_id": '2',
                        "date": "12/03/2023",
                        "title": "Uchafuzi wa mazingira",
                        "description": "Hali mbaya ya dunia huku mwongozo",
                        "nature": "complaint",
                        "severity": "5",
                        "client": "2",
                        "who": "2023-09-28 00:57:52.322984",
                        "what": "12/03/2023",
                        "where": "1",
                        "result": "1",
                        "comment": "1",
                        "channel": "portal",
                        "language": "swaheng",
                        "attachment": "b.png",
                        "griever": "1",
                        "grievance_status": "1",
                        'created_date': '',
                        'updated_date': '',
                        'created_by': '',
                        'updated_by': ''

                    },

                    {
                        "grievance_id": '3',
                        "date": "12/03/2023",
                        "title": "Maji kujaa majumbani",
                        "description": "Maji hayo yanaletwa na kiwanda kimoja hivi sikitaji",
                        "nature": "complaint",
                        "severity": "5",
                        "client": "3",
                        "who": "2023-09-28 00:57:52.322984",
                        "what": "12/03/2023",
                        "where": "1",
                        "result": "1",
                        "comment": "1",
                        "channel": "portal",
                        "language": "swaheng",
                        "attachment": "c.png",
                        "griever": "1",
                        "grievance_status": "1",
                        'created_date': '',
                        'updated_date': '',
                        'created_by': '',
                        'updated_by': ''

                        
                    },
                    {
                        "grievance_id": '4',
                        "date": "12/03/2023",
                        "title": "Umeme",
                        "description": "imekuwa tatizo kubwa sana",
                        "nature": "complaint",
                        "severity": "5",
                        "client": "3",
                        "who": "2023-09-28 00:57:52.322984",
                        "what": "12/03/2023",
                        "where": "1",
                        "result": "1",
                        "comment": "1",
                        "channel": "portal",
                        "language": "swaheng",
                        "attachment": "d.png",
                        "griever": "1",
                        "grievance_status": "1",
                        'created_date': '',
                        'updated_date': '',
                        'created_by': '',
                        'updated_by': ''
                      
                    }

                    // INTERFACES
// interface Grievance {
//     grievance_id: string
//     date: string
//     title: string
//     description: string
//     nature: string
//     severity: string
//     client: string
//     who: string
//     what: string
//     where: string
//     result: string
//     comment: string
//     channel: string
//     language: string
//     attachment: string
//     griever: string
//     grievance_status: string
//     created_date: string
//     updated_date:string
//     created_by: string
//     updated_by: string
    
// }

// export interface GrievanceState{
//     grievances: Grievance[]
//     status: 'idle' | 'loading' | 'failed'
// }


  const dispatch = useAppDispatch()
  
  const init =async () => {
    await dispatch(checkAuthenticated()).then(() => dispatch(loadUser))
  }

  useEffect( () => {
    if (localStorage.getItem('access')) {
      init()
    }
    
  }, [])

    // useEffect( () => {
  //    if(performance.navigation.type == 2){
  //       location.reload();
  //     }
  // }, [])
 

 
            <form>

              <div className="form-group card card-sm border">
                <div className="card-body">

                  <div className="form-check custom-radio">

                    
                    <input className="form-check-input collapsed" id="checkoutPaymentCard" name="payment" type="radio" checked />

                    <label className="form-check-label d-flex justify-content-between w-100 fs-sm text-body text-nowrap" htmlFor="checkoutPaymentCard">
                      Anonymous Griever
                    </label>

                  </div>

                </div>
              </div>

              <div className="form-group card card-sm border">
                <div className="card-body">

                  <div className="form-check custom-radio">

                    <input className="form-check-input" id="checkoutPaymentPaypal" name="payment" type="radio" />

                    <label className="form-check-label d-flex justify-content-between w-100 fs-sm text-body text-nowrap" for="checkoutPaymentPaypal">
                      Non Anonymous Griever
                    </label>

                  </div>

                </div>
              </div>

              <button className="btn btn-dark" type="submit">
                Continue <i className="fe fe-arrow-right ms-2"></i>
              </button>

            </form>

  createGrievance: {
            reducer: (state, action: PayloadAction<Grievance>) => {
                console.log(action.payload)
                
            }, 
            prepare: ( start_date, end_date, title, description, what, where, who, result, comment, nature, severity, channel, operational_status, language, assignment_date, time_spent, last_pending_date, pending_reason, resolution_date, conclusion, satisfaction_level, satisfaction_comment, pending_started, pending_last_start, pending_stopped, pending_time_spent, client, workforce, team, agent, griever, parent, child, created_by, updated_by, created_date, updated_date, attachments) =>{
                return {
                    payload: {
                        grievance_id: nanoid(),
                        ref: nanoid(),
                        start_date,
                        end_date,
                        title,
                        description,
                        what,
                        where,
                        who,
                        result,
                        comment,
                        nature,
                        severity,
                        channel,
                        operational_status,
                        language,
                        assignment_date,
                        time_spent,
                        last_pending_date,
                        pending_reason,
                        resolution_date,
                        conclusion,
                        satisfaction_level,
                        satisfaction_comment,
                        pending_started,
                        pending_last_start,
                        pending_stopped,
                        pending_time_spent,
                        client,
                        workforce,
                        team,
                        agent,
                        griever,
                        parent,
                        child,
                        created_by,
                        updated_by,
                        created_date,
                        updated_date,
                        attachments
                    }
                }
            }
        }

        
// INTERFACES
// export interface Client {
//     client_id: string
//     name: string
//     type: string
//     phone: string
//     address: string
//     region: string
//     country: string
//     created_date: string
//     updated_date: string
//     created_by: string
//     updated_by: string
// }

// export interface ClientState {
//     clients: Client[],
//     status: 'idle' | 'loading' | 'failed'
// }

  // const severityOptions = (
    //     natures.map((nature:any) => (
    //         <option value={nature.id} key={nature.id}>{nature.name}</option>
    //     ))
    // )

    // const severityOptions = (
    //     severities.map((severity:any) => (
    //         <option value={severity.id} key={severity.id}>{severity.name}</option>
    //     ))
    // )


    //  let grv = Array(grievers.grievers)

    // const grv = Array()
    // Object.values(grievers.grievers).map((griever:any) => (
    //         grv.push(griever)
    // ))
    
    // console.log(typeof(grv[0]))
 
    // const griever_in_question = (grv.map((grievers: any) => (
    //     Object.values(grievers).map((griever:any) => {
    //         if(griever.name === 'anonymous'){
    //             // console.log(griever.name)
    //             return 'handle anonymous user here'
    //         }
    //     })
    // )))

    // const griever_in_question = (grv.map((grievers: any) =>{
    //     console.log(grievers)
    //     for (let index = 0; index < grievers.length; index++) {
    //         // const element = ;
    //         // if (grievers[index].name === 'annonymous') {
    //         //     return grievers[index].name
    //         // }
    //         console.log(grievers[index])
            
    //     }
    // }))
    // console.log(griever_in_question)

 {single_client?.name}

 


// INTERFACES
// interface Grievance {
//     grievance_id: string
//     ref: String
//     start_date: string
//     end_date: String
//     title: string
//     description: string
//     what: string
//     where: string
//     who: string
//     result: string
//     comment: string
//     nature: string
//     severity: string
//     channel: string
//     operational_status: String
//     language: string
//     assignment_date: String
//     time_spent: String
//     last_pending_date: String
//     pending_reason: String
//     resolution_date: String
//     conclusion: String
//     satisfaction_level: String
//     satisfaction_comment: String
//     pending_started: String
//     pending_last_start: String
//     pending_stopped: String
//     pending_time_spent: String
//     client: string
//     workforce: String
//     team: String
//     agent: String
//     griever: string
//     parent: String
//     child: String
//     created_by: string
//     updated_by: string
//     created_date: string
//     updated_date:string
//     attachments: string
    
// }

// export interface GrievanceState{
//     grievances: Grievance[]
//     status: any,
//     errors: any
// }
 
   // console.log(clients)
  // let client_name

  // for(const key in clients){
  //       if (clients.hasOwnProperty(key)) {
  //           const value = clients[key]
  //         //  if (condition) {
            
  //         //  }
            
  //       }
  //   }
  


  // let grievances = props.data
  // console.log(grievances)

  // let single_client: any
  // for (let index = 0; index < grievances.length; index++) {
  //   if (clients.find(client => client.client_id === grievances[index].client)){
  //     single_client = clients.find(client => client.client_id === grievances[index].client)
  //     break
  //   }

  // }

    style={{borderTop: '1px solid #e5e5e5'}}
    // const onProfileChange = (e: any) => setProfile(e.target.files[0])

 
    // const grievers = useAppSelector(selectAllGrievers)
    // const user = useAppSelector(selectLoggedinUser)
    // const data = props.data
    // console.log(grievers)

    // const griever = getItemByUID(grievers, user.id)[0]
    // const grv = getItemByUID(griever, user.id)
    // const x = useMemo(() => getGriever(grievers, user), [grievers, user]) 
    // console.log(griever)
    // console.log(user)
    // console.log(x)

    // let form: any
    // let data: any
   
       
    // console.log(grv)
   

    // griever states
    // const [f_name, setFname] = useState('')
    // const [m_name, setMname] = useState('')
    // const [l_name, setLname] = useState('')
    // const [gender, setGender] = useState('')
    // const [age, setAge] = useState('')
    // const [mobile_no, setMobile_no] = useState('')
    // const [email, setEmail] = useState('')
    // const [street, setStreet] = useState('')
    // const [ward, setWard] = useState('')
    // const [district, setDistrict] = useState('')
    // const [region, setRegion] = useState('')
    // const [profile, setProfile] = useState('')
    // const [marital_status, setMarital_status] = useState('')
    // const [spouse, setSpouse] = useState('')
    // const [next_kin, setNextkin] = useState('')
    // const [updateFormData, setUpdateFormData] = useState({...data})
    //  const data = {
    //         f_name:  griever.f_name,
    //         l_name: griever.l_name,
    //         m_name: griever.m_name,
    //         gender: griever.gender,
    //         age: griever.age,
    //         mobile_no: griever.mobile_no,
    //         street: griever.street,
    //         ward: griever.ward,
    //         district: griever.district,
    //         region: griever.region,
    //         marital_status: griever.marital_status,
    //         spouse: griever.spouse,
    //         next_kin: griever.next_kin
    //     }
      
   

 

      

    
    // declare hooks

    // const canSave = Boolean(f_name) && Boolean(m_name) && Boolean(l_name)

    // handle on change to set out local state
    // const onFnameChange = (e: any) => setFname(e.target.value)
    // const onMnameChange = (e: any) => setMname(e.target.value)
    // const onLnameChange = (e: any) => setLname(e.target.value)
    // const onGenderChange = (e: any) => setGender(e.target.value)
    // const onAgeChange = (e: any) => setAge(e.target.value)
    // const onMobileChange = (e: any) => setMobile_no(e.target.value)
    // const onEmailChange = (e: any) => setEmail(e.target.value)
    // const onStreetChange = (e: any) => setStreet(e.target.value)
    // const onWardChange = (e: any) => setWard(e.target.value)
    // const onDistrictChange = (e: any) => setDistrict(e.target.value)
    // const onRegionChange = (e: any) => setRegion(e.target.value)
    // const onMaritalChange = (e: any) => setMarital_status(e.target.value)
    // const onSpouseChange = (e: any) => setSpouse(e.target.value)
    // const onNextKinChange = (e: any) => setNextkin(e.target.value)
    // const onProfileChange = (e: any) => setProfile(e.target.files[0])



   

    

     
   

    // submit form
    // const onRegistration = (e: any) => {
    //     e.preventDefault()
       
    //         if (f_name && m_name && l_name){

    //             dispatch(newGriever({
    //                 anonymous: 0,
    //                 f_name,
    //                 l_name,
    //                 m_name,
    //                 gender,
    //                 age,
    //                 mobile_no,
    //                 street,
    //                 ward,
    //                 district,
    //                 region,
    //                 marital_status,
    //                 spouse,
    //                 next_kin,
    //                 // profile
    //             }))

    //             setFname('')
    //             setMname('')
    //             setLname('')
    //             setMobile_no('')
    //             setWard('')
    //             setDistrict('')
    //             setRegion('')
    //             setGender('')
    //             setAge('')
    //             setStreet('')
    //             setMarital_status('')
    //             setSpouse('')
    //             setNextkin('')
    //             // setProfile('')
                
    //             navigate('/profile')
    //         }
                
    // }

  
   
    //  form = (
    //             <form style={{paddingTop:0.5 + 'em', width:100 + "%", marginLeft: 0 + '%'}} >
    //                 <div className="row">
    //                     <div className="col-12 col-md-4">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="fname" type="text" placeholder="First name" name='fname' value={f_name} onChange={onFnameChange} required />
    //                         </div>
    //                     </div>
    //                     <div className="col-12 col-md-4">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="mname" type="text" placeholder="Middle name" name='mname' value={m_name} onChange={onMnameChange} required />
    //                         </div>
    //                     </div>
    //                     <div className="col-12 col-md-4">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="lname" type="text" placeholder="Last name" name='lname' value={l_name} onChange={onLnameChange} required />
    //                         </div>
    //                     </div>   
    //                     <div className="col-12 col-md-5">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="mobile" type="text" placeholder="Mobile No" name='mobile' value={mobile_no} onChange={onMobileChange} required />
    //                         </div>
    //                     </div> 
    //                     <div className="col-12 col-md-7">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="email" type="email" placeholder="email@uvw.xyz" name='email' value={email} onChange={onEmailChange} required />
    //                         </div>
    //                     </div>  
    //                     <div className="col-12 col-md-6">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="region" type="text" placeholder="Region" name='region' value={region} onChange={onRegionChange} required />
    //                         </div>
    //                     </div>
    //                     <div className="col-12 col-md-6">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="district" type="text" placeholder="District" name='district' value={district} onChange={onDistrictChange} required />
    //                         </div>
    //                     </div>
    //                     <div className="col-12 col-md-7">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="ward" type="text" placeholder="Ward" name='ward' value={ward} onChange={onWardChange} required />
    //                         </div>
    //                     </div>  
    //                     <div className="col-12 col-md-5">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="street" type="text" placeholder="Street" name='street' value={street} onChange={onStreetChange} required />
    //                         </div>
    //                     </div>  
    //                     <div className="col-12 col-md-2">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="age" type="text" placeholder="Age" name='age' value={age} onChange={onAgeChange} required />
    //                         </div>
    //                     </div>  
    //                     <div className="col-12 col-md-3">
    //                         <div className="form-group">
    //                             <select className="form-select" onChange={onGenderChange}>
    //                                 <option defaultValue=''>Gender</option>
    //                                 <option defaultValue="1">Male</option>
    //                                 <option defaultValue="2">Female</option>
    //                                 <option defaultValue="3">Other</option>
    //                             </select>
    //                         </div>
    //                     </div>  
    //                     <div className="col-12 col-md-4">
    //                         <div className="form-group">
    //                             <select className="form-select" onChange={onMaritalChange}>
    //                                 <option defaultValue=''>Marital Status</option>
    //                                 <option defaultValue="1">Single</option>
    //                                 <option defaultValue="2">Mariaged</option>
    //                                 <option defaultValue="3">Devoced</option>
    //                                 <option defaultValue="3">Widow</option>
    //                             </select>
    //                         </div>
    //                     </div>   
    //                     <div className="col-12 col-md-3">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="spouse" type="text" placeholder="Spouse" name='spouse' value={spouse} onChange={onSpouseChange} required />
    //                         </div>
    //                     </div>
    //                     <div className="col-12 col-md-12">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="kin" type="text" placeholder="Next of kin" name='kin' value={next_kin} onChange={onNextKinChange} required />
    //                         </div>
    //                     </div>
    //                     {/* <div className="col-12 col-md-12">
    //                         <div className="form-group">
    //                             <input className="form-control form-control-sm" id="profile" type="file"  name='profile' value={profile} onChange={onProfileChange} />
    //                         </div>
    //                     </div> */}
    //                 </div>
    //                 <div className="row mt-3">
    //                     <div className="col-12 col-md-12">
    //                         <button className="btn btn-lg w-100 btn-outline-dark" type='submit' onClick={onRegistration}>
    //                         Save Changes
    //                         </button>
    //                     </div>
    //                 </div>
    //             </form>
    //         )

          

   const loggout = (e: any) => {
        dispatch(logout())
        navigate('/login')
    }